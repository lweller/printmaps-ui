import {TestBed} from "@angular/core/testing";
import {ScaleMark, ScaleService, Text} from "./scale.service";
import {Scale} from "../model/intern/scale";
import {cases} from "jasmine-parameterized";
import {allValuesOf} from "../utils/common.util";
import {round} from "lodash";

describe("ScaleService", () => {

    let scaleService: ScaleService;

    beforeEach(() => {
        TestBed.configureTestingModule({
            providers: [ScaleService]
        });

        scaleService = TestBed.inject(ScaleService);
    });

    cases(allValuesOf(Scale))
        .it("should build 6 equidistant primary marks spaced between 7 and 16 mm", (scale) => {
            // when
            const scaleMarks = scaleService.buildScaleMarks(scale);

            // then
            const pairsOfConsecutivePrimaryScaleMarks = scaleMarks
                .filter(scaleMark => !scaleMark.secondary)
                .reduce((pairs, _, index, scaleMarks) =>
                        index + 2 > scaleMarks.length
                            ? pairs
                            : pairs.concat([scaleMarks.slice(index, index + 2)]),
                    []
                );
            const distanceInMMBetweenTwoConsecutiveScapeMarks = pairsOfConsecutivePrimaryScaleMarks
                .map(([scaleMark1, scaleMark2]) => round(scaleMark2.xOffsetInMM - scaleMark1.xOffsetInMM, 3));
            expect(distanceInMMBetweenTwoConsecutiveScapeMarks)
                .withContext("scale intervall count")
                .toHaveSize(5);
            const distanceInMMBetweenPrimaryScaleMarks = distanceInMMBetweenTwoConsecutiveScapeMarks
                .reduce((distinctValues, value) =>
                        distinctValues.length == 0 || distinctValues.indexOf(value) < 0
                            ? distinctValues.concat(value)
                            : distinctValues,
                    []
                );
            expect(distanceInMMBetweenPrimaryScaleMarks)
                .withContext("distinct differences between positions of two consecutive primary scale marks")
                .toHaveSize(1);
            expect(distanceInMMBetweenPrimaryScaleMarks[0])
                .withContext("distance (in mm) between two primary scale marks")
                .toBeGreaterThan(7);
            expect(distanceInMMBetweenPrimaryScaleMarks[0])
                .withContext("distance (in mm) between two primary scale marks")
                .toBeLessThan(16);
            expect(pairsOfConsecutivePrimaryScaleMarks
                .map(([scaleMark1, scaleMark2]) =>
                    Math.abs(round(Number.parseFloat(scaleMark2.measureLabel.text)
                        - Number.parseFloat(scaleMark1.measureLabel.text), 3)))
                .reduce((distinctValues, value) =>
                        distinctValues.length == 0 || distinctValues.indexOf(value) < 0
                            ? distinctValues.concat(value)
                            : distinctValues,
                    []
                ))
                .withContext("distinct difference between labels of two consecutive primary scale marks")
                .toHaveSize(1);
        });

    cases(allValuesOf(Scale))
        .it("should build 1 secondary mark exactly in between first and second primary one", (scale) => {
            // when
            const scaleMarks = scaleService.buildScaleMarks(scale);

            // then
            expect(scaleMarks.slice(0, 3).map(scaleMarks => scaleMarks.secondary))
                .withContext("secondary flag of three first scale marks")
                .toEqual([false, true, false]);
            expect((scaleMarks[0].xOffsetInMM + scaleMarks[2].xOffsetInMM) / 2)
                .withContext("average position between positions of two first primary scale marks")
                .toBeCloseTo(scaleMarks[1].xOffsetInMM, 3);
            expect((Number.parseFloat(scaleMarks[0].measureLabel.text) + Number.parseFloat(scaleMarks[2].measureLabel.text)) / 2)
                .withContext("average position between labels of two first primary scale marks")
                .toBeCloseTo(Number.parseFloat(scaleMarks[1].measureLabel.text), 3);
        });

    it("should build a SVG give some computed scale marks", () => {
        // given
        spyOn(scaleService, "buildScaleMarks").and.returnValue([
            new ScaleMark(new Text("1"), undefined, 10, -2, false),
            new ScaleMark(new Text("0.5"), undefined, 13, -0.5, true),
            new ScaleMark(new Text("2"), new Text("km"), 16, -2, false)
        ]);

        // when
        const result = scaleService.buildScaleSvg(Scale.RATIO_1_250000);

        // then
        expect(result)
            .withContext("generated SVG")
            .toBe("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<svg width=\"27.865mm\" height=\"14.65mm\" viewBox=\"-0.933 -5.05 27.865 14.65\" xmlns=\"http://www.w3.org/2000/svg\"><path style=\"stroke:#000000;stroke-width: 0.15\" d=\"m10 2 v-2\"/><g transform=\"translate(10 -2)\" aria-label=\"1\"><path transform=\"translate(-0.371875 -1.05) scale(0.07)\" d=\"m10.625 29.601h-3.5083v-18.199q0-0.85714 0-1.8339 0.019934-0.97674 0.039867-1.9336 0.039867-0.97674 0.059801-1.8538 0.039867-0.89701 0.059801-1.5748-0.33887 0.3588-0.59801 0.61794-0.25914 0.25914-0.53821 0.49834-0.25914 0.2392-0.55814 0.51827-0.299 0.25914-0.71761 0.61794l-2.9502 2.412-1.9136-2.4518 7.6345-5.9601h2.99z\"/></g>undefined\n" +
                "<path style=\"stroke:#000000;stroke-width: 0.15\" d=\"m13 2 v-1\"/><g transform=\"translate(13 1)\" aria-label=\"0.5\"><path transform=\"translate(-1.28205 -0.75) scale(0.05)\" d=\"m18.618 14.99q0 3.5282-0.51827 6.3189-0.49834 2.7907-1.6346 4.7242-1.1163 1.9336-2.8904 2.9502-1.7741 1.0166-4.3056 1.0166-2.3522 0-4.1063-1.0166-1.7342-1.0166-2.8904-2.9502-1.1362-1.9336-1.7143-4.7242-0.55814-2.7907-0.55814-6.3189 0-3.5282 0.49834-6.3189 0.51827-2.7907 1.6146-4.7043 1.1163-1.9336 2.8704-2.9502 1.7741-1.0166 4.2857-1.0166 2.3721 0 4.1262 1.0166 1.7542 0.99668 2.9103 2.9302 1.1561 1.9136 1.7342 4.7043 0.57807 2.7907 0.57807 6.3389zm-14.93 0q0 2.99 0.299 5.2226 0.299 2.2326 0.95681 3.7276 0.65781 1.4751 1.7143 2.2326 1.0764 0.73754 2.6113 0.73754t2.6113-0.73754q1.0764-0.73754 1.7542-2.2126 0.69767-1.4751 0.99668-3.7076 0.31894-2.2525 0.31894-5.2625 0-2.99-0.31894-5.2226-0.299-2.2326-0.99668-3.7076-0.67774-1.4751-1.7542-2.2126-1.0764-0.73754-2.6113-0.73754t-2.6113 0.73754q-1.0565 0.73754-1.7143 2.2126-0.65781 1.4751-0.95681 3.7076-0.299 2.2326-0.299 5.2226z\"/><path transform=\"translate(-0.10114999999999985 -0.75) scale(0.05)\" d=\"m-1.1176e-7 27.389q0-0.75748 0.19934-1.2757 0.19934-0.53821 0.53821-0.85714 0.33887-0.33887 0.79734-0.4784 0.45847-0.15947 0.99668-0.15947 0.51827 0 0.97674 0.15947 0.47841 0.13953 0.81728 0.4784 0.33887 0.31894 0.53821 0.85714 0.19934 0.51827 0.19934 1.2757 0 0.73754-0.19934 1.2757-0.19934 0.51827-0.53821 0.85714-0.33887 0.33887-0.81728 0.49834-0.45847 0.15947-0.97674 0.15947-0.53821 0-0.99668-0.15947-0.45847-0.15947-0.79734-0.49834-0.33887-0.33887-0.53821-0.85714-0.19934-0.53821-0.19934-1.2757z\"/><path transform=\"translate(0.40200000000000014 -0.75) scale(0.05)\" d=\"m8.2525 11.492q1.9734 0 3.6678 0.55814 1.7143 0.5382 2.9701 1.6146 1.2757 1.0764 1.9934 2.6711 0.71761 1.5947 0.71761 3.6877 0 2.2724-0.67774 4.0864-0.67774 1.814-2.0133 3.0698-1.3355 1.2558-3.309 1.9336-1.9535 0.65781-4.505 0.65781-1.0166 0-2.0133-0.09967-0.97674-0.099665-1.8937-0.299-0.89701-0.1794-1.7143-0.4784-0.81728-0.299-1.4751-0.69768v-3.4286q0.65781 0.45847 1.5349 0.81728 0.89701 0.3588 1.8738 0.59801 0.97674 0.2392 1.9535 0.37874 0.99668 0.1196 1.8339 0.1196 1.5748 0 2.8106-0.3588 1.2359-0.37874 2.093-1.1561 0.85714-0.77741 1.3156-1.9535 0.45847-1.1761 0.45847-2.7907 0-2.8505-1.7542-4.3455-1.7542-1.515-5.103-1.515-0.53821 0-1.1761 0.0598-0.61794 0.03987-1.2558 0.1196-0.61794 0.07973-1.196 0.1794-0.55814 0.079735-0.97674 0.15947l-1.794-1.1362 1.0963-13.714h13.754v3.309h-10.605l-0.77741 8.3522q0.63787-0.1196 1.6744-0.25914 1.0565-0.13953 2.4917-0.13953z\"/></g>undefined\n" +
                "<path style=\"stroke:#000000;stroke-width: 0.15\" d=\"m16 2 v-2\"/><g transform=\"translate(16 -2)\" aria-label=\"2\"><path transform=\"translate(-0.636265 -1.05) scale(0.07)\" d=\"m18.179 29.781h-18.179v-3.1096l6.9767-7.5947q1.495-1.6146 2.6711-2.9502 1.1761-1.3355 1.9934-2.6113 0.83721-1.2757 1.2757-2.5515 0.43854-1.2957 0.43854-2.8106 0-1.1761-0.33887-2.0731-0.33887-0.89701-0.97674-1.5149-0.61794-0.63787-1.4751-0.95681-0.85714-0.31894-1.9136-0.31894-1.8937 0-3.4286 0.77741-1.5149 0.75747-2.8904 1.9535l-2.0332-2.3721q0.79734-0.71761 1.7143-1.3355 0.91694-0.63787 1.9734-1.0963 1.0565-0.45847 2.2326-0.71761 1.1761-0.27907 2.4718-0.27907 1.9136 0 3.4485 0.53821 1.5548 0.53821 2.6312 1.5548 1.0764 0.99668 1.6545 2.4518 0.59801 1.4352 0.59801 3.2492 0 1.6944-0.53821 3.2292-0.51827 1.5349-1.4551 3.0299-0.91694 1.4751-2.2126 2.9701-1.2757 1.495-2.7708 3.1096l-5.6013 5.9601v0.15947h13.734z\"/></g><g transform=\"translate(17.836264999999997 -2)\" aria-label=\"km\"><path transform=\"translate(0 -1.05) scale(0.07)\" d=\"m20.586 29.399h-4.7997l-8.6704-9.4639-2.3611 2.245v7.2189h-3.6385v-30.114h3.6385v19.315l10.509-10.819h4.5868l-10.045 9.9865z\"/><path transform=\"translate(1.79102 -1.05) scale(0.07)\" d=\"m32.508 29.399h-3.6385v-12.309q0-1.3935-0.13548-2.6902-0.11612-1.2967-0.52255-2.0708-0.44513-0.8322-1.2773-1.258-0.83221-0.42578-2.3998-0.42578-1.5289 0-3.0579 0.77414-1.5289 0.75479-3.0579 1.9354 0.05806 0.44513 0.09677 1.0451 0.03871 0.58061 0.03871 1.1612v13.838h-3.6385v-12.309q0-1.4322-0.13548-2.7095-0.11612-1.2967-0.52255-2.0708-0.44513-0.8322-1.2773-1.2386-0.83221-0.42578-2.3998-0.42578-1.4902 0-2.9998 0.73544-1.4902 0.73544-2.9805 1.8773v16.141h-3.6385v-21.618h3.6385v2.3998q1.7031-1.4128 3.3869-2.2063 1.7031-0.7935 3.6191-0.7935 2.2063 0 3.7352 0.92897 1.5483 0.92897 2.3031 2.574 2.2063-1.8579 4.0256-2.6708 1.8192-0.83221 3.8901-0.83221 3.5611 0 5.2448 2.1676 1.7031 2.1483 1.7031 6.019z\"/></g>\n" +
                "<path style=\"stroke:#000000;stroke-width: 0.15\" d=\"m10 1.925 h6\" /><g transform=\"translate(13 5)\" aria-label=\"1:250'000\"><path transform=\"translate(-8.523249999999999 -1.5) scale(0.1)\" d=\"m10.625 29.601h-3.5083v-18.199q0-0.85714 0-1.8339 0.019934-0.97674 0.039867-1.9336 0.039867-0.97674 0.059801-1.8538 0.039867-0.89701 0.059801-1.5748-0.33887 0.3588-0.59801 0.61794-0.25914 0.25914-0.53821 0.49834-0.25914 0.2392-0.55814 0.51827-0.299 0.25914-0.71761 0.61794l-2.9502 2.412-1.9136-2.4518 7.6345-5.9601h2.99z\"/><path transform=\"translate(-6.960749999999999 -1.5) scale(0.1)\" d=\"m3.7253e-8 27.389q0-0.75748 0.19934-1.2757 0.19934-0.53821 0.53821-0.85714 0.33887-0.33887 0.79734-0.4784 0.45847-0.15947 0.99668-0.15947 0.51827 0 0.97674 0.15947 0.47841 0.13953 0.81728 0.4784 0.33887 0.31894 0.53821 0.85714 0.19934 0.51827 0.19934 1.2757 0 0.73754-0.19934 1.2757-0.19934 0.51827-0.53821 0.85714-0.33887 0.33887-0.81728 0.49834-0.45847 0.15947-0.97674 0.15947-0.53821 0-0.99668-0.15947-0.45847-0.15947-0.79734-0.49834-0.33887-0.33887-0.53821-0.85714-0.19934-0.53821-0.19934-1.2757zm0-17.462q0-0.77741 0.19934-1.2957 0.19934-0.53821 0.53821-0.85714 0.33887-0.33887 0.79734-0.47841t0.99668-0.13953q0.51827 0 0.97674 0.13953 0.47841 0.13953 0.81728 0.47841 0.33887 0.31894 0.53821 0.85714 0.19934 0.51827 0.19934 1.2957 0 0.73754-0.19934 1.2558-0.19934 0.51827-0.53821 0.85714-0.33887 0.33887-0.81728 0.49834-0.45847 0.15947-0.97674 0.15947-0.53821 0-0.99668-0.15947-0.45847-0.15947-0.79734-0.49834-0.33887-0.33887-0.53821-0.85714-0.19934-0.51827-0.19934-1.2558z\"/><path transform=\"translate(-5.95445 -1.5) scale(0.1)\" d=\"m18.179 29.781h-18.179v-3.1096l6.9767-7.5947q1.495-1.6146 2.6711-2.9502 1.1761-1.3355 1.9934-2.6113 0.83721-1.2757 1.2757-2.5515 0.43854-1.2957 0.43854-2.8106 0-1.1761-0.33887-2.0731-0.33887-0.89701-0.97674-1.5149-0.61794-0.63787-1.4751-0.95681-0.85714-0.31894-1.9136-0.31894-1.8937 0-3.4286 0.77741-1.5149 0.75747-2.8904 1.9535l-2.0332-2.3721q0.79734-0.71761 1.7143-1.3355 0.91694-0.63787 1.9734-1.0963 1.0565-0.45847 2.2326-0.71761 1.1761-0.27907 2.4718-0.27907 1.9136 0 3.4485 0.53821 1.5548 0.53821 2.6312 1.5548 1.0764 0.99668 1.6545 2.4518 0.59801 1.4352 0.59801 3.2492 0 1.6944-0.53821 3.2292-0.51827 1.5349-1.4551 3.0299-0.91694 1.4751-2.2126 2.9701-1.2757 1.495-2.7708 3.1096l-5.6013 5.9601v0.15947h13.734z\"/><path transform=\"translate(-3.6365499999999997 -1.5) scale(0.1)\" d=\"m8.2525 11.492q1.9734 0 3.6678 0.55814 1.7143 0.5382 2.9701 1.6146 1.2757 1.0764 1.9934 2.6711 0.71761 1.5947 0.71761 3.6877 0 2.2724-0.67774 4.0864-0.67774 1.814-2.0133 3.0698-1.3355 1.2558-3.309 1.9336-1.9535 0.65781-4.505 0.65781-1.0166 0-2.0133-0.09967-0.97674-0.099665-1.8937-0.299-0.89701-0.1794-1.7143-0.4784-0.81728-0.299-1.4751-0.69768v-3.4286q0.65781 0.45847 1.5349 0.81728 0.89701 0.3588 1.8738 0.59801 0.97674 0.2392 1.9535 0.37874 0.99668 0.1196 1.8339 0.1196 1.5748 0 2.8106-0.3588 1.2359-0.37874 2.093-1.1561 0.85714-0.77741 1.3156-1.9535 0.45847-1.1761 0.45847-2.7907 0-2.8505-1.7542-4.3455-1.7542-1.515-5.103-1.515-0.53821 0-1.1761 0.0598-0.61794 0.03987-1.2558 0.1196-0.61794 0.07973-1.196 0.1794-0.55814 0.079735-0.97674 0.15947l-1.794-1.1362 1.0963-13.714h13.754v3.309h-10.605l-0.77741 8.3522q0.63787-0.1196 1.6744-0.25914 1.0565-0.13953 2.4917-0.13953z\"/><path transform=\"translate(-1.3764499999999997 -1.5) scale(0.1)\" d=\"m18.618 14.99q0 3.5282-0.51827 6.3189-0.49834 2.7907-1.6346 4.7242-1.1163 1.9336-2.8904 2.9502-1.7741 1.0166-4.3056 1.0166-2.3522 0-4.1063-1.0166-1.7342-1.0166-2.8904-2.9502-1.1362-1.9336-1.7143-4.7242-0.55814-2.7907-0.55814-6.3189 0-3.5282 0.49834-6.3189 0.51827-2.7907 1.6146-4.7043 1.1163-1.9336 2.8704-2.9502 1.7741-1.0166 4.2857-1.0166 2.3721 0 4.1262 1.0166 1.7542 0.99668 2.9103 2.9302 1.1561 1.9136 1.7342 4.7043 0.57807 2.7907 0.57807 6.3389zm-14.93 0q0 2.99 0.299 5.2226 0.299 2.2326 0.95681 3.7276 0.65781 1.4751 1.7143 2.2326 1.0764 0.73754 2.6113 0.73754t2.6113-0.73754q1.0764-0.73754 1.7542-2.2126 0.69767-1.4751 0.99668-3.7076 0.31894-2.2525 0.31894-5.2625 0-2.99-0.31894-5.2226-0.299-2.2326-0.99668-3.7076-0.67774-1.4751-1.7542-2.2126-1.0764-0.73754-2.6113-0.73754t-2.6113 0.73754q-1.0565 0.73754-1.7143 2.2126-0.65781 1.4751-0.95681 3.7076-0.299 2.2326-0.299 5.2226z\"/><path transform=\"translate(0.9853500000000004 -1.5) scale(0.1)\" d=\"m4.5249 9.0152e-7 -1.0166 10.525h-2.4917l-1.0166-10.525z\"/><path transform=\"translate(1.9378500000000005 -1.5) scale(0.1)\" d=\"m18.618 14.99q0 3.5282-0.51827 6.3189-0.49834 2.7907-1.6346 4.7242-1.1163 1.9336-2.8904 2.9502-1.7741 1.0166-4.3056 1.0166-2.3522 0-4.1063-1.0166-1.7342-1.0166-2.8904-2.9502-1.1362-1.9336-1.7143-4.7242-0.55814-2.7907-0.55814-6.3189 0-3.5282 0.49834-6.3189 0.51827-2.7907 1.6146-4.7043 1.1163-1.9336 2.8704-2.9502 1.7741-1.0166 4.2857-1.0166 2.3721 0 4.1262 1.0166 1.7542 0.99668 2.9103 2.9302 1.1561 1.9136 1.7342 4.7043 0.57807 2.7907 0.57807 6.3389zm-14.93 0q0 2.99 0.299 5.2226 0.299 2.2326 0.95681 3.7276 0.65781 1.4751 1.7143 2.2326 1.0764 0.73754 2.6113 0.73754t2.6113-0.73754q1.0764-0.73754 1.7542-2.2126 0.69767-1.4751 0.99668-3.7076 0.31894-2.2525 0.31894-5.2625 0-2.99-0.31894-5.2226-0.299-2.2326-0.99668-3.7076-0.67774-1.4751-1.7542-2.2126-1.0764-0.73754-2.6113-0.73754t-2.6113 0.73754q-1.0565 0.73754-1.7143 2.2126-0.65781 1.4751-0.95681 3.7076-0.299 2.2326-0.299 5.2226z\"/><path transform=\"translate(4.299650000000001 -1.5) scale(0.1)\" d=\"m18.618 14.99q0 3.5282-0.51827 6.3189-0.49834 2.7907-1.6346 4.7242-1.1163 1.9336-2.8904 2.9502-1.7741 1.0166-4.3056 1.0166-2.3522 0-4.1063-1.0166-1.7342-1.0166-2.8904-2.9502-1.1362-1.9336-1.7143-4.7242-0.55814-2.7907-0.55814-6.3189 0-3.5282 0.49834-6.3189 0.51827-2.7907 1.6146-4.7043 1.1163-1.9336 2.8704-2.9502 1.7741-1.0166 4.2857-1.0166 2.3721 0 4.1262 1.0166 1.7542 0.99668 2.9103 2.9302 1.1561 1.9136 1.7342 4.7043 0.57807 2.7907 0.57807 6.3389zm-14.93 0q0 2.99 0.299 5.2226 0.299 2.2326 0.95681 3.7276 0.65781 1.4751 1.7143 2.2326 1.0764 0.73754 2.6113 0.73754t2.6113-0.73754q1.0764-0.73754 1.7542-2.2126 0.69767-1.4751 0.99668-3.7076 0.31894-2.2525 0.31894-5.2625 0-2.99-0.31894-5.2226-0.299-2.2326-0.99668-3.7076-0.67774-1.4751-1.7542-2.2126-1.0764-0.73754-2.6113-0.73754t-2.6113 0.73754q-1.0565 0.73754-1.7143 2.2126-0.65781 1.4751-0.95681 3.7076-0.299 2.2326-0.299 5.2226z\"/><path transform=\"translate(6.66145 -1.5) scale(0.1)\" d=\"m18.618 14.99q0 3.5282-0.51827 6.3189-0.49834 2.7907-1.6346 4.7242-1.1163 1.9336-2.8904 2.9502-1.7741 1.0166-4.3056 1.0166-2.3522 0-4.1063-1.0166-1.7342-1.0166-2.8904-2.9502-1.1362-1.9336-1.7143-4.7242-0.55814-2.7907-0.55814-6.3189 0-3.5282 0.49834-6.3189 0.51827-2.7907 1.6146-4.7043 1.1163-1.9336 2.8704-2.9502 1.7741-1.0166 4.2857-1.0166 2.3721 0 4.1262 1.0166 1.7542 0.99668 2.9103 2.9302 1.1561 1.9136 1.7342 4.7043 0.57807 2.7907 0.57807 6.3389zm-14.93 0q0 2.99 0.299 5.2226 0.299 2.2326 0.95681 3.7276 0.65781 1.4751 1.7143 2.2326 1.0764 0.73754 2.6113 0.73754t2.6113-0.73754q1.0764-0.73754 1.7542-2.2126 0.69767-1.4751 0.99668-3.7076 0.31894-2.2525 0.31894-5.2625 0-2.99-0.31894-5.2226-0.299-2.2326-0.99668-3.7076-0.67774-1.4751-1.7542-2.2126-1.0764-0.73754-2.6113-0.73754t-2.6113 0.73754q-1.0565 0.73754-1.7143 2.2126-0.65781 1.4751-0.95681 3.7076-0.299 2.2326-0.299 5.2226z\"/></g>\n" +
                "</svg>");
    });
});